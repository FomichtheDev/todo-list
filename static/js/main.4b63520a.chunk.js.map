{"version":3,"sources":["Components/SignUpForm/SignUpForm.module.css","Components/Header/Header.module.css","Components/LogInForm/LogInForm.module.css","Components/Footer/Footer.module.css","Components/TaskItem/TaskItem.module.css","Components/CheckBox/CheckBox.module.css","Components/Layout/Layout.module.css","Components/TodoComponent/TodoComponent.module.css","Components/TodoInput/TodoInput.module.css","Components/FormInput/FormInput.module.css","Components/Layout/Layout.js","actions/index.js","Components/Footer/Footer.js","Components/CheckBox/CheckBox.js","Components/TaskItem/TaskItem.js","Components/TaskList/TaskList.js","Components/TodoInput/TodoInput.js","Components/TodoComponent/TodoComponent.js","Components/LogInForm/LogInForm.js","Components/FormInput/FormInput.js","Components/SignUpForm/SignUpForm.js","Components/Header/Header.js","App.js","serviceWorker.js","reducers/inputReducer.js","reducers/TaskReducer.js","reducers/globalStatus.js","reducers/LogInValidator.js","reducers/SignUpValidator.js","reducers/isLoggedIn.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Layout","props","className","classes","layout","children","inputChange","text","type","payload","RemoveTask","task","ChangeStatus","newTasks","index","setGlobalStatus","param","Footer","tasks","useSelector","state","tasksLeft","filter","isCompleted","length","ClearCompleted","dispatch","useDispatch","push","white","bottomSpan","footerComp","to","exact","onClick","map","newTask","CheckBox","styles","checked","done","checkbox","id","onChange","htmlFor","name","TaskItem","todoItem","icon","faTimes","onDelete","TaskList","onDeleteHandler","onChangeHandler","changedTask","key","TodoInput","inputState","input","globalStatus","faAngleDown","value","e","target","placeholder","onKeyPress","TodoComponent","todoComponent","path","component","render","LogInForm","logInState","errors","email","test","String","toLowerCase","password","setLogInData","setLogInErrors","handleSubmit","event","a","preventDefault","validateForm","authData","returnSecureToken","axios","post","console","log","valid","Object","values","forEach","val","onSubmit","autoComplete","href","error","FormInput","SignUpForm","isLogged","fullNameRegEx","RegExp","fullName","passwordConfirmation","setSignUpData","setSignUpErrors","SignUp","faPlay","Header","isLoggedIn","navbar","activeClassName","headerActive","App","Boolean","window","location","hostname","match","inputReducer","action","localStoreArr","localStorage","getItem","JSON","parse","setItem","stringify","TaskReducer","indexOf","splice","globalStatusReducer","initialState","LogInValidatorReducer","SignUpValidatorReducer","loggedInReducer","rootReducer","combineReducers","formValidatorReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4b63520a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SignUpForm\":\"SignUpForm_SignUpForm__RUwap\",\"icon\":\"SignUpForm_icon__1G4wO\",\"SignUp\":\"SignUpForm_SignUp__BsMEp\",\"error\":\"SignUpForm_error__vT4I9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Header_navbar__15l9m\",\"headerActive\":\"Header_headerActive__ploth\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LogInForm\":\"LogInForm_LogInForm__2HXFE\",\"error\":\"LogInForm_error__3d447\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerComp\":\"Footer_footerComp__1Q7ws\",\"white\":\"Footer_white__qUOTK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TaskItem_todoItem__261Yt\",\"icon\":\"TaskItem_icon__Ea5kd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CheckBox_checkbox__1bHbk\",\"done\":\"CheckBox_done__3GzkT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__1kN5G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoComponent\":\"TodoComponent_todoComponent__3vg3x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"TodoInput_icon__19F7K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FormInput_input__12keV\"};","import React from \"react\";\r\nimport classes from './Layout.module.css'\r\n\r\n\r\nconst Layout = (props) => (\r\n    <section className={classes.layout}>\r\n        {props.children}\r\n    </section>\r\n);\r\n\r\nexport default Layout;\r\n","\r\nexport const inputChange = (text) => {\r\n    return{\r\n        type: 'CHANGE',\r\n        payload : text\r\n    }\r\n};\r\n\r\nexport const addTask = (newTask) => {\r\n    return{\r\n        type: 'ADD_TASK',\r\n        newTask\r\n    }\r\n};\r\n\r\nexport const RemoveTask = (task) => {\r\n    return{\r\n        type: 'REMOVE_TASK',\r\n        task\r\n    }\r\n};\r\n\r\nexport const ChangeStatus = (newTasks,index) => {\r\n    return{\r\n        type: 'CHANGE_STATUS_TASK',\r\n        newTasks,\r\n        index\r\n    }\r\n};\r\n\r\nexport const setGlobalStatus = (param) => {\r\n    if(param){\r\n        return{\r\n            type: 'CHANGE_TO_TRUE'\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            type: 'CHANGE_TO_FALSE'\r\n        }\r\n    }\r\n};\r\n\r\nexport const setLogInInput = (name , value) => {\r\n    if(name === 'password'){\r\n        return{\r\n            type: 'SET_PASSWORD',\r\n            value\r\n        }\r\n    }\r\n    else{\r\n        return{\r\n            type: 'SET_EMAIL',\r\n            value\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport const setSignUpData = (name, value) => {\r\n    return{\r\n        type: 'SET_SIGN_UP_DATA',\r\n        name,\r\n        value\r\n    }\r\n};\r\n\r\nexport const setSignUpErrors = (errors) => {\r\n    return{\r\n        type: 'SET_SIGN_UP_ERRORS',\r\n        errors\r\n    }\r\n};\r\n\r\nexport const setLogInData = (name, value) => {\r\n    return{\r\n        type: 'SET_LOG_IN_DATA',\r\n        name,\r\n        value\r\n    }\r\n};\r\n\r\nexport const setLogInErrors = (errors) => {\r\n    return{\r\n        type: 'SET_LOG_IN_ERRORS',\r\n        errors\r\n    }\r\n};\r\n\r\nexport const fetchTasks = (taskArr) => {\r\n    return{\r\n        type: 'FETCH_TASKS',\r\n        taskArr\r\n    }\r\n};\r\n\r\nexport const logIn = () => {\r\n    return{\r\n        type: 'LOG_IN'\r\n    }\r\n};\r\n\r\nexport const logOut = () => {\r\n    return{\r\n        type: 'LOG_OUT'\r\n    }\r\n};","import React from \"react\";\r\nimport classes from './Footer.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {RemoveTask} from \"../../actions\";\r\n\r\nconst Footer = () => {\r\n    const tasks = useSelector(state => state.tasks);\r\n    const tasksLeft = tasks.filter(task => task.isCompleted === false).length;\r\n    const ClearCompleted = [];\r\n    const dispatch = useDispatch();\r\n\r\n    if(tasks.filter(task => task.isCompleted).length === 0){\r\n        ClearCompleted.push(classes.white);\r\n    }\r\n\r\n    const TaskClearer = () => {\r\n        const newTasks = [...tasks];\r\n        newTasks.map((newTask) => {\r\n            if(newTask.isCompleted){\r\n                return  dispatch(RemoveTask(newTask));\r\n            }\r\n            return null\r\n        })\r\n    };\r\n\r\n    let bottomSpan;\r\n\r\n    if(tasksLeft < 1){\r\n        bottomSpan = <span>No items left</span>\r\n    }\r\n    if(tasksLeft === 1){\r\n        bottomSpan = <span>1 item left</span>\r\n    }\r\n    if(tasksLeft > 1){\r\n        bottomSpan = <span>{tasksLeft} items left</span>\r\n    }\r\n\r\n    return(\r\n            <footer className={classes.footerComp}>\r\n                {bottomSpan}\r\n                <ul>\r\n                    <NavLink to='/tasks' exact>\r\n                        <li>All</li>\r\n                    </NavLink>\r\n                    <NavLink to='/active'>\r\n                        <li>Active</li>\r\n                    </NavLink>\r\n                    <NavLink to='/completed'>\r\n                        <li>Completed</li>\r\n                    </NavLink>\r\n\r\n\r\n                </ul>\r\n\r\n\r\n                <span className={ClearCompleted} onClick={TaskClearer}>Clear Completed</span>\r\n            </footer>\r\n        )\r\n};\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport classes from './CheckBox.module.css'\r\n\r\nfunction CheckBox(props) {\r\n        const styles = [];\r\n        if(props.checked){\r\n            styles.push(classes.done)\r\n        }\r\n    return(\r\n        <div className={classes.checkbox}>\r\n            <input type='checkbox' id={props.id} checked={props.checked} onChange={props.onChange}/>\r\n            <label className={styles} htmlFor={props.id} onClick={props.onChange}>{props.name}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckBox;","import React from \"react\";\r\nimport classes from './TaskItem.module.css'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport CheckBox from \"../CheckBox/CheckBox\";\r\n\r\nconst TaskItem = (props) => {\r\n    return (\r\n        <div className={classes.todoItem}>\r\n            <CheckBox id={props.id} checked={props.checked} name={props.name} onChange={props.onChange} />\r\n            <FontAwesomeIcon icon={faTimes} className={classes.icon} onClick={props.onDelete}/>\r\n        </div>\r\n)\r\n};\r\n\r\nexport default TaskItem;","import React from \"react\";\r\nimport TaskItem from \"../TaskItem/TaskItem\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RemoveTask, ChangeStatus} from \"../../actions\";\r\n\r\n\r\nconst TaskList = (props) => {\r\n    const tasks = useSelector(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const onDeleteHandler = (task) => {\r\n        dispatch(RemoveTask(task));\r\n    };\r\n\r\n\r\n    const onChangeHandler = (index) => {\r\n        const newTasks = [...tasks];\r\n        const changedTask = tasks[index];\r\n        changedTask.isCompleted = !changedTask.isCompleted;\r\n        newTasks[index] = changedTask;\r\n        dispatch(ChangeStatus(newTasks));\r\n    };\r\n\r\n    switch (props.type) {\r\n        default:\r\n            return (\r\n                <main>\r\n                    {\r\n                        tasks.map((task, index) => {\r\n                            return (\r\n                                <TaskItem name={task.text}\r\n                                          checked={task.isCompleted}\r\n                                          key={index}\r\n                                          onDelete={() => onDeleteHandler(task)}\r\n                                          onChange={() => onChangeHandler(index)}/>\r\n                            )\r\n                        })}\r\n                </main>\r\n            );\r\n        case 'active':\r\n            return (\r\n                <main>\r\n                    {\r\n                        tasks.map((task, index) => {\r\n                            if (!task.isCompleted) {\r\n                                return (\r\n                                    <TaskItem name={task.text}\r\n                                              checked={task.isCompleted}\r\n                                              key={index}\r\n                                              onDelete={() => onDeleteHandler(index)}\r\n                                              onChange={() => onChangeHandler(index)}/>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })\r\n                    }\r\n                </main>\r\n            );\r\n        case 'completed':\r\n            return (\r\n                <main>\r\n                    {\r\n                        tasks.map((task, index) => {\r\n                            if (task.isCompleted) {\r\n                                return (\r\n                                    <TaskItem name={task.text}\r\n                                              checked={task.isCompleted}\r\n                                              key={index}\r\n                                              onDelete={() => onDeleteHandler(index)}\r\n                                              onChange={() => onChangeHandler(index)}/>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })\r\n                    }\r\n                </main>\r\n            );\r\n    }\r\n\r\n};\r\n\r\nexport default TaskList;","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport classes from './TodoInput.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTask, inputChange, ChangeStatus, setGlobalStatus} from \"../../actions\";\r\n\r\nconst TodoInput = () => {\r\n        const inputState = useSelector(state => state.input);\r\n        const tasks = useSelector(state => state.tasks);\r\n        const globalStatus = useSelector(state => state.globalStatus);\r\n        const dispatch = useDispatch();\r\n\r\n        const allTasksComplete = () => {\r\n            if (globalStatus) {\r\n                tasks.map((task, index) => {\r\n                    const newTasks = [...tasks];\r\n                    const changedTask = tasks[index];\r\n                    changedTask.isCompleted = false;\r\n                    newTasks[index] = changedTask;\r\n                    return dispatch(ChangeStatus(newTasks));\r\n                });\r\n                dispatch(setGlobalStatus(!globalStatus));\r\n            } else {\r\n                tasks.map((task, index) => {\r\n                    const newTasks = [...tasks];\r\n                    const changedTask = tasks[index];\r\n                    changedTask.isCompleted = true;\r\n                    newTasks[index] = changedTask;\r\n                    return dispatch(ChangeStatus(newTasks));\r\n                });\r\n                dispatch(setGlobalStatus(!globalStatus));\r\n            }\r\n        };\r\n\r\n\r\n        const inputChangeHandler = (e) => {\r\n            dispatch(inputChange(e.target.value))\r\n        };\r\n\r\n        const addNewTask = (e) => {\r\n            if (e.key === 'Enter') {\r\n                const newTAsk = {\r\n                    text: inputState,\r\n                    isCompleted: false,\r\n                };\r\n                dispatch(addTask(newTAsk));\r\n                dispatch(inputChange(''));\r\n            }\r\n\r\n\r\n        };\r\n\r\n        return (\r\n            <header>\r\n                <label onClick={allTasksComplete}><FontAwesomeIcon icon={faAngleDown} className={classes.icon}/></label>\r\n                <input type='text'\r\n                       value={inputState}\r\n                       onChange={inputChangeHandler}\r\n                       placeholder={'What task needs to be done'}\r\n                       onKeyPress={addNewTask}\r\n                />\r\n            </header>\r\n        )\r\n\r\n    }\r\n;\r\n\r\nexport default TodoInput;","import React from \"react\";\r\nimport classes from './TodoComponent.module.css'\r\nimport Footer from \"../Footer/Footer\";\r\nimport TaskList from \"../TaskList/TaskList\";\r\nimport TodoInput from \"../TodoInput/TodoInput\";\r\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom'\r\n\r\nconst TodoComponent = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div className={classes.todoComponent}>\r\n                <h1>Todos</h1>\r\n                <section>\r\n                    <TodoInput/>\r\n                    <Switch>\r\n                        <Route path='/tasks' exact component={TaskList}/>\r\n                        <Route path='/active' exact render={() => <TaskList type='active'/>}/>\r\n                        <Route path='/completed' exact render={() => <TaskList type='completed'/>}/>\r\n                    </Switch>\r\n                    <Footer/>\r\n                </section>\r\n            </div>\r\n        </Router>\r\n\r\n    )\r\n};\r\n\r\nexport default TodoComponent;","import React from \"react\";\r\nimport classes from './LogInForm.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logIn, setLogInData, setLogInErrors} from \"../../actions\";\r\nimport axios from 'axios';\r\n\r\nfunction LogInForm() {\r\n    const logInState = useSelector(state => state.LogInForm);\r\n    const dispatch = useDispatch();\r\n    const {errors} = logInState;\r\n\r\n\r\n    const onChange =(e) => {\r\n        const { name, value } = e.target;\r\n        const validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        let errors = {...logInState.errors};\r\n        switch (name) {\r\n            case 'email':\r\n                errors.email =\r\n                    validEmailRegex.test(String(value).toLowerCase())\r\n                        ? ''\r\n                        : 'Email is not valid!';\r\n                break;\r\n            case 'password':\r\n                errors.password =\r\n                    value.length < 8\r\n                        ? 'Wrong password!'\r\n                        : '';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        dispatch(setLogInData(name,value));\r\n        dispatch(setLogInErrors(errors));\r\n\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(validateForm(logInState.errors)) {\r\n                const authData = {\r\n                    email: logInState.email,\r\n                    password: logInState.password,\r\n                    returnSecureToken: true\r\n                };\r\n\r\n                try {\r\n                    const response = await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAr7rSU3glbvTR4hpSZCfsf5TGrFDMCwFo', authData);\r\n                    // console.log(response.data);\r\n                }catch (e) {\r\n                    console.log(e)\r\n                }\r\n                dispatch(logIn());\r\n            }\r\n        };\r\n\r\n\r\n    const validateForm = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach(\r\n            // if we have an error string set valid to false\r\n            (val) => val.length > 0 && (valid = false)\r\n        );\r\n        return valid;\r\n    };\r\n\r\n    return (\r\n        <div className={classes.LogInForm}>\r\n            <div>\r\n                <h1>Log In Form</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"E-mail\" onChange={onChange} value={logInState.email} autoComplete='current-password'/>\r\n                    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" onChange={onChange} value={logInState.password} autoComplete='current-password'/>\r\n                    <button type=\"submit\">&#xf04b;</button>\r\n                    <p>forgot your password? <a href=\"https://fontawesome.com/icons/play?style=solid\">click here</a></p>\r\n                    {errors.email.length > 0 &&\r\n                    <span className={classes.error}>{errors.email}</span>}\r\n                    {errors.password.length > 0 &&\r\n                    <span className={classes.error}>{errors.password}</span>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogInForm;","import React from \"react\";\r\nimport classes from './FormInput.module.css'\r\n\r\n\r\nfunction FormInput(props) {\r\n    return(\r\n        <div className={classes.input}>\r\n            <label htmlFor={props.id}>{props.text}</label>\r\n            <input type={props.type} id={props.id} name={props.id} onChange={props.onChange} autoComplete='current-password'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport classes from \"../SignUpForm/SignUpForm.module.css\";\r\nimport FormInput from \"../FormInput/FormInput\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSignUpData, setSignUpErrors} from \"../../actions\";\r\nimport axios from 'axios'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\nfunction SignUpForm() {\r\n\r\n    const SignUpForm = useSelector(state => state.SignUpForm);\r\n    const {errors} = SignUpForm;\r\n    const dispatch = useDispatch();\r\n    const isLogged = useSelector(state => state.isLogged);\r\n\r\n\r\n    const onChange =(e) => {\r\n        const { name, value } = e.target;\r\n        const validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        const fullNameRegEx = new RegExp(/^([\\w]{3,})+\\s+([\\w\\s]{3,})+$/i);\r\n        let errors = {...SignUpForm.errors};\r\n        switch (name) {\r\n            case 'fullName':\r\n                errors.fullName =\r\n                    !fullNameRegEx.test(String(value))\r\n                        ? 'Incorrect Full Name!'\r\n                        : '';\r\n                break;\r\n            case 'email':\r\n                errors.email =\r\n                    validEmailRegex.test(String(value).toLowerCase())\r\n                        ? ''\r\n                        : 'Email is not valid!';\r\n                break;\r\n            case 'password':\r\n                errors.password =\r\n                    value.length < 8\r\n                        ? 'Password must be 8 characters long!'\r\n                        : '';\r\n                break;\r\n            case 'passwordConfirmation':\r\n                errors.passwordConfirmation =\r\n                    (SignUpForm.password === value)\r\n                        ? ''\r\n                        : 'Passwords should be the same!';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        dispatch(setSignUpData(name,value));\r\n        dispatch(setSignUpErrors(errors));\r\n\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        // debugger\r\n        event.preventDefault();\r\n        if(validateForm(SignUpForm.errors)) {\r\n            const authData = {\r\n                email: SignUpForm.email,\r\n                password: SignUpForm.password,\r\n                returnSecureToken: true\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAr7rSU3glbvTR4hpSZCfsf5TGrFDMCwFo', authData);\r\n                // console.log(response.data);\r\n            }catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const validateForm = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach(\r\n            // if we have an error string set valid to false\r\n            (val) => val.length > 0 && (valid = false)\r\n        );\r\n        return valid;\r\n    };\r\n\r\n    return(\r\n        <div className={classes.SignUpForm}>\r\n            {isLogged ? null : <span>Please, sign up or log in before using TODO app</span>}\r\n            <h1>Sign Up Form</h1>\r\n            <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <FormInput type='text' id='fullName' text='Full Name' onChange={onChange}/>\r\n                    {errors.fullName.length > 0 &&\r\n                    <span className={classes.error}>{errors.fullName}</span>}\r\n                    <FormInput type='email' id='email' text='E-mail' onChange={onChange}/>\r\n                    {errors.email.length > 0 &&\r\n                    <span className={classes.error}>{errors.email}</span>}\r\n                    <FormInput type='password' id='password' text='Password' onChange={onChange}/>\r\n                    {errors.password.length > 0 &&\r\n                    <span className={classes.error}>{errors.password}</span>}\r\n                    <FormInput type='password' id='passwordConfirmation' text='Confirm password' onChange={onChange}/>\r\n                    {errors.passwordConfirmation.length > 0 &&\r\n                    <span className={classes.error}>{errors.passwordConfirmation}</span>}\r\n                    <section>\r\n                        <span className={classes.SignUp}>Sign Up</span>\r\n                        <button type=\"submit\"><FontAwesomeIcon icon={faPlay} className={classes.icon}/></button>\r\n                    </section>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpForm;","import React from \"react\";\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOut} from \"../../actions\";\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch();\r\n    const isLogged = useSelector(state => state.isLoggedIn.isLogged);\r\n\r\n    return(\r\n        <nav className={classes.navbar}>\r\n            <ul>\r\n                <NavLink exact to='/' activeClassName={classes.headerActive}><li>Log In</li></NavLink>\r\n                <NavLink to='/signup' activeClassName={classes.headerActive}><li>Sign Up</li></NavLink>\r\n                <NavLink to='/tasks' activeClassName={classes.headerActive}><li>Todos</li></NavLink>\r\n            </ul>\r\n            {isLogged ? <button onClick={() => dispatch(logOut())}>Log Out</button> : <button>You are not logged in</button>}\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Layout from \"./Components/Layout/Layout\";\nimport TodoComponent from \"./Components/TodoComponent/TodoComponent\";\nimport LogInForm from \"./Components/LogInForm/LogInForm\";\nimport SignUpForm from \"./Components/SignUpForm/SignUpForm\";\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport Header from \"./Components/Header/Header\";\nimport {useSelector} from \"react-redux\";\n\n\nfunction App() {\n\n    const isLogged = useSelector(state => state.isLoggedIn.isLogged);\n    return (\n        <Router>\n            <div className=\"App\">\n                <Header/>\n                <Switch>\n                    <Route path='/' exact component={LogInForm}/>\n                    <Route path='/signup' exact component={SignUpForm}/>\n                    <Route path='/tasks' exact render={() => isLogged ? <Layout><TodoComponent/></Layout> : <Redirect to='/signup' /> }/>\n                    <Redirect to='/signup'/>\n                 </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const inputReducer = (state = '', action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case 'CHANGE':\r\n            return action.payload\r\n    }\r\n};\r\n\r\nexport default inputReducer;","let localStoreArr = localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : [];\r\nlocalStorage.setItem(`items`, JSON.stringify(localStoreArr) );\r\n\r\nconst TaskReducer = (state = [...localStoreArr], action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case 'ADD_TASK':\r\n            localStorage.setItem('items',JSON.stringify([...state,{...action.newTask}])); //Строго сохранение\r\n            return [\r\n                ...state,\r\n                {...action.newTask}\r\n            ];\r\n        case 'REMOVE_TASK':\r\n            const newTasks = [...state];\r\n            const index = newTasks.indexOf(action.task);\r\n            newTasks.splice(index, 1);\r\n            localStorage.setItem('items',JSON.stringify(newTasks)); //Строго сохранение\r\n            return [\r\n                ...newTasks\r\n            ];\r\n        case 'CHANGE_STATUS_TASK':\r\n            localStorage.setItem('items',JSON.stringify(action.newTasks)); //Строго сохранение\r\n            return [\r\n                ...action.newTasks\r\n            ];\r\n    }\r\n};\r\n\r\nexport default TaskReducer;","const globalStatusReducer = (state= false, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case 'CHANGE_TO_TRUE':\r\n            return !state;\r\n        case 'CHANGE_TO_FALSE':\r\n            return !state\r\n    }\r\n};\r\n\r\nexport default globalStatusReducer;","const initialState = {\r\n    email: '',\r\n    password: '',\r\n    errors: {\r\n        email: '',\r\n        password: '',\r\n    }\r\n};\r\n\r\nconst LogInValidatorReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case 'SET_LOG_IN_DATA':\r\n            return {\r\n                ...state,\r\n                [action.name] : action.value\r\n            };\r\n        case 'SET_LOG_IN_ERRORS':\r\n            return {\r\n                ...state,\r\n                errors: action.errors\r\n            };\r\n    }\r\n};\r\n\r\nexport default LogInValidatorReducer;","const initialState = {\r\n    fullName: '',\r\n    email: '',\r\n    password: '',\r\n    passwordConfirmation: '',\r\n    errors: {\r\n        fullName: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirmation: '',\r\n    }\r\n};\r\n\r\nconst SignUpValidatorReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case 'SET_SIGN_UP_DATA':\r\n            return {\r\n                ...state,\r\n                [action.name] : action.value\r\n            };\r\n        case 'SET_SIGN_UP_ERRORS':\r\n            return {\r\n                ...state,\r\n                errors: action.errors\r\n            };\r\n    }\r\n};\r\n\r\nexport default SignUpValidatorReducer;"," const loggedInReducer = (state = {isLogged: true}, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case 'LOG_IN':\r\n            return {\r\n                isLogged: true\r\n            };\r\n        case 'LOG_OUT':\r\n            return {\r\n                isLogged: false\r\n            };\r\n    }\r\n};\r\n\r\nexport default loggedInReducer;","import inputReducer from \"./inputReducer\";\r\nimport {combineReducers} from 'redux';\r\nimport TaskReducer from \"./TaskReducer\";\r\nimport globalStatusReducer from \"./globalStatus\";\r\nimport formValidatorReducer from \"./LogInValidator\";\r\nimport SignUpValidatorReducer from \"./SignUpValidator\";\r\nimport isLoggedIn from \"./isLoggedIn\";\r\n\r\nconst rootReducer = combineReducers({\r\n    input: inputReducer,\r\n    tasks: TaskReducer,\r\n    globalStatus: globalStatusReducer,\r\n    LogInForm : formValidatorReducer,\r\n    SignUpForm: SignUpValidatorReducer,\r\n    isLoggedIn\r\n\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport rootReducer from \"./reducers/rootReducer\";\n\n\nlet store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <React.StrictMode>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}